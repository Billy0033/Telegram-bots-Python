import qrcode
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.types import ParseMode
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.utils import executor
from PIL import Image


BOT_TOKEN = '6205323230:AAGhKSx77wTFQO4RqTw5YUgPBK_xqvEQeo4'

bot = Bot(token=BOT_TOKEN)
# storage = MemoryStorage()
dp = Dispatcher(bot) 
qr_code_text = ""

@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    kb = [
       [
            types.KeyboardButton(text="QR-code")
       ]
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
    )
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start
    await message.reply('–ü—Ä–∏–≤–µ—Çüëã\n–Ø –º–æ–≥—É –¥–µ–ª–∞—Ç—å QR –∫–æ–¥—ã.', reply_markup=keyboard)


@dp.message_handler(lambda message: message.text == "QR-code")
async def create_qr(message: types.Message):
    global qr_code_text
    qr_code_text = message.text
    await message.reply("–û—Ç–ª–∏—á–Ω–æ!\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥.")

@dp.message_handler(lambda message: message.text.startswith('http'))
async def generate_qr_code(message: types.Message):
    global qr_code_text
    url = message.text
    qr_code = qrcode.make(url)
    qr_code.save("metanit_qr.png")
    
    with open("metanit_qr.png", "rb") as qr_image:
        await bot.send_photo(message.chat.id, qr_image, caption=f"–í–æ—Ç —Ç–≤–æ–π QR-–∫–æ–¥ –¥–ª—è —Å—Å—ã–ª–∫–∏: {url}", parse_mode=None)
    
    qr_code_text = ""
# qr_code = segno.make_qr("")

#ParseMode.MARKDOWN qr_code.save("metanit_qr.png")
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)